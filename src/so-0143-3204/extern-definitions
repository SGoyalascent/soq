<!--
https://stackoverflow.com/questions/1433204
Q: What are extern variables in C?
Q: How do I share a variable between source files in C? With extern, but how?
-->

Using `extern` is only of relevance when the program you're building
consists of multiple source files linked together, where some of the
variables defined, for example, in source file `file1.c` need to be
referenced in other source files, such as `file2.c`.

It is important to [understand the difference between _defining_ a
variable and _declaring_ a
variable](https://stackoverflow.com/questions/1410563):

* A variable is **declared** when the compiler is informed that a
  variable exists (and this is its type); it does not allocate the
  storage for the variable at that point.
* A variable is **defined** when the compiler allocates the storage for
  the variable.

You may declare a variable multiple times (though once is sufficient);
you may only define it once within a given scope.
A variable definition is also a declaration, but not all variable
declarations are definitions.

## Best way to declare and define global variables

The clean, reliable way to declare and define global variables is to use
a header file to contain an `extern` _declaration_ of the variable.

The header is included by the one source file that defines the variable
and by all the source files that reference the variable.
For each program, one source file (and only one source file) defines the
variable.
Similarly, one header file (and only one header file) should declare the
variable.
The header file is crucial; it enables cross-checking between
independent TUs (translation units — think source files) and ensures
consistency.

Although there are other ways of doing it, this method is simple and
reliable.
It is demonstrated by `file3.h`, `file1.c` and `file2.c`:

### file3.h

### file1.c

### file2.c

That's the best way to declare and define global variables.

<hr>

_The next two files complete the source for `prog1`:_

### prog1.h

### prog1.c

* `prog1` uses `prog1.c`, `file1.c`, `file2.c`, `file3.h` and `prog1.h`.

<hr>

## Guidelines

Rules to be broken by experts only, and only with good reason:

* A header file only contains `extern` declarations of variables — never
  `static` or unqualified variable definitions.
* For any given variable, only one header file declares it (SPOT —
  Single Point of Truth).
* A source file never contains `extern` declarations of variables —
  source files always include the (sole) header that declares them.
* For any given variable, exactly one source file defines the variable,
  preferably initializing it too.  (Although there is no need to
  initialize explicitly to zero, it does no harm and can do some good,
  because there can be only one initialized definition of a particular
  global variable in a program).
* The source file that defines the variable also includes the header to
  ensure that the definition and the declaration are consistent.
* A function should never need to declare a variable using `extern`.
* Avoid global variables whenever possible — use functions instead.

<sup>_The source code and text of this answer are available in my
      [SOQ](https://github.com/jleffler/soq) (Stack Overflow Questions)
      repository on GitHub in the
      [src/so-0143-3204](https://github.com/jleffler/soq/tree/master/src/so-0143-3204)
      sub-directory._
</sup>

<sup>_If you're not an experienced C programmer, you could (and perhaps
       should) stop reading here._
</sup>

## Not so good way to define global variables

With some (indeed, many) C compilers, you can get away with what's
called a 'common' definition of a variable too.
'Common', here, refers to a technique used in Fortran for sharing
variables between source files, using a (possibly named) COMMON block.
What happens here is that each of a number of files provides a tentative
definition of the variable.
As long as no more than one file provides an initialized definition,
then the various files end up sharing a common single definition of the
variable:

### file10.c

### file11.c

### file12.c

This technique does not conform to the letter of the C standard and the
'one definition rule', but the C standard lists it as a common variation
on its one definition rule.

Because this technique is not always supported, it is best to avoid
using it, _especially if your code needs to be portable_.  Using this
technique, you can also end up with unintentional type punning.  If one
of the files declared `i` as a `double` instead of as an `int`, C's
type-unsafe linkers probably would not spot the mismatch.  If you're on
a machine with 64-bit `int` and `double`, you'd not even get a warning;
on a machine with 32-bit `int` and 64-bit `double`, you'd probably get a
warning about the different sizes — the linker would use the largest
size, exactly as a Fortran program would take the largest size of any
common blocks.

This is mentioned in the C standard in informative Annex J as a common
extension:

> J.5.11 Multiple external definitions

>There may be more than one external definition for the identifier of an
object, with or without the explicit use of the keyword extern; if the
definitions disagree, or more than one is initialized, the behavior is
undefined (6.9.2).

<hr>

_The next two files complete the source for `prog2`:_

### prog2.h

### prog2.c

* `prog2` uses `prog2.c`, `file10.c`, `file11.c`, `file12.c`, `prog2.h`.

<hr>

### Warning

As noted in comments here, and as stated in my answer to a similar
[question](https://stackoverflow.com/questions/1490693), using multiple
definitions for a global variable leads to undefined behaviour, which is
the standard's way of saying "anything could happen".
One of the things that can happen is that the program behaves as you
expect; and J.5.11 says, approximately, "you might be lucky more often
than you deserve".
But a program that relies on multiple definitions of an extern variable
— with or without the explicit 'extern' keyword — is not a strictly
conforming program and not guaranteed to work everywhere.
Equivalently: it contains a bug which may or may not show itself.

## Violating the guidelines

There are, of course, many ways in which these guidelines can be broken.
Occasionally, there may be a good reason to break the guidelines, but
such occasions are extremely unusual.

### faulty_header.h

Note 1: if the header defines the variable without the `extern` keyword,
then each file that includes the header creates a tentative definition
of the variable.
As noted previously, this will often work, but the C standard does not
guarantee that it will work.

### broken_header.h

Note 2: if the header defines and initializes the variable, then only
one source file in a given program can use the header.
Since headers are primarily for sharing information, it is a bit silly
to create one that can only be used once.

### seldom_correct.h

Note 3: if the header defines a static variable (with or without
initialization), then each source file ends up with its own private
version of the 'global' variable.

If the variable is actually a complex array, for example, this can lead
to extreme duplication of code.  It can, very occasionally, be a
sensible way to achieve some effect, but that is very unusual.

<hr>

## Summary

Use the header technique I showed first.
It works reliably and everywhere.
Note, in particular, that the header declaring the `global_variable` is
included in every file that uses it — including the one that defines it.
This ensures that everything is self-consistent.

Similar concerns arise with declaring and defining functions —
analogous rules apply.
But the question was about variables specifically, so I've kept the
answer to variables only.

(The complete programs use functions, so function declarations have
crept in.
I use the keyword `extern` in front of function declarations in headers
for consistency — to match the `extern` in front of variable
declarations in headers.
Many people prefer not to use `extern` in front of functions; the
compiler doesn't care — and ultimately, neither do I as long as you're
consistent, at least within a file.)

### End of Original Answer

<sup>_If you're not an experienced C programmer, you probably should stop reading here._</sup>

<hr>

_Late Major Addition_

# Avoiding Code Duplication

One concern that is sometimes (and legitimately) raised about the
'declarations in headers, definitions in source' mechanism described
here is that there are two files to be kept synchronized — the header
and the source.  This is usually followed up with an observation that a
macro can be used so that the header serves double duty — normally
declaring the variables, but when a specific macro is set before the
header is included, it defines the variables instead.

Another concern can be that the variables need to be defined in each of
a number of 'main programs'.  This is normally a spurious concern; you
can simply introduce a C source file to define the variables and link
the object file produced with each of the programs.

A typical scheme works like this, using the original global variable
illustrated in `file3.h`:

### file3a.h

### file1a.c

### file2a.c

<hr>

_The next two files complete the source for `prog3`:_

### prog3.h

### prog3.c

* `prog3` uses `prog3.c`, `file1a.c`, `file2a.c`, `file3a.h`, `prog3.h`.

<hr>

## Variable initialization

The problem with this scheme as shown is that it does not provide for
initialization of the global variable.  With C99 or C11 and variable argument
lists for macros, you could define a macro to support initialization too.
(With C89 and no support for variable argument lists in macros, there is no
easy way to handle arbitrarily long initializers.)

### file3b.h

<sup>Reverse contents of `#if` and `#else` blocks, fixing bug identified by
[Denis Kniazhev](https://stackoverflow.com/users/369317/denis-kniazhev)</sup>

### file1b.c

### file2b.c

Clearly, the code for the oddball structure is not what you'd normally
write, but it illustrates the point.  The first argument to the second
invocation of `INITIALIZER` is `{ 41` and the remaining argument
(singular in this example) is `43 }`.  Without C99 or similar support
for variable argument lists for macros, initializers that need to
contain commas are very problematic.

<sup>Correct header `file3b.h` included (instead of `fileba.h`) per
[Denis Kniazhev](https://stackoverflow.com/users/369317/denis-kniazhev)</sup>

<hr>

_The next two files complete the source for `prog4`:_

### prog4.h

### prog4.c

* `prog4` uses `prog4.c`, `file1b.c`, `file2b.c`, `prog4.h`, `file3b.h`.

<hr>

## Header Guards

Any header should be protected against reinclusion, so that type
definitions (enum, struct or union types, or typedefs generally) do not
cause problems.  The standard technique is to wrap the body of the
header in a header guard such as:

    #ifndef FILE3B_H_INCLUDED
    #define FILE3B_H_INCLUDED

    ...contents of header...

    #endif /* FILE3B_H_INCLUDED */

The header might be included twice indirectly.  For example, if
`file4b.h` includes `file3b.h` for a type definition that isn't shown,
and `file1b.c` needs to use both header `file4b.h` and `file3b.h`, then
you have some more tricky issues to resolve.  Clearly, you might revise
the header list to include just `file4b.h`.  However, you might not be
aware of the internal dependencies — and the code should, ideally,
continue to work.

Further, it starts to get tricky because you might include `file4b.h`
before including `file3b.h` to generate the definitions, but the normal
header guards on `file3b.h` would prevent the header being reincluded.

So, you need to include the body of `file3b.h` at most once for
declarations, and at most once for definitions, but you might need both
in a single translation unit (TU — a combination of a source file and
the headers it uses).

## Multiple inclusion with variable definitions

However, it can be done subject to a not too unreasonable constraint.
Let's introduce a new set of file names:

* `external.h` for the EXTERN macro definitions, etc.
* `file1c.h` to define types (notably, `struct oddball`, the type of `oddball_struct`).
* `file2c.h` to define or declare the global variables.
* `file3c.c` which defines the global variables.
* `file4c.c` which simply uses the global variables.
* `file5c.c` which shows that you can declare and then define the global variables.
* `file6c.c` which shows that you can define and then (attempt to) declare the global variables.

In these examples, `file5c.c` and `file6c.c` directly include the header
`file2c.h` several times, but that is the simplest way to show that the
mechanism works.  It means that if the header was indirectly included
twice, it would also be safe.

The restrictions for this to work are:

1. The header defining or declaring the global variables may not itself
   define any types.
2. Immediately before you include a header that should define variables,
   you define the macro DEFINE_VARIABLES.
3. The header defining or declaring the variables has stylized contents.

### external.h

### file1c.h

### file2c.h

### file3c.c

### file4c.c

### file5c.c

### file6c.c

<hr>

_The next source file completes the source (provides a main program) for `prog5`, `prog6` and `prog7`:_

### prog5.c

* `prog5` uses `prog5.c`, `file3c.c`, `file4c.c`, `file1c.h`, `file2c.h`, `external.h`.
* `prog6` uses `prog5.c`, `file5c.c`, `file4c.c`, `file1c.h`, `file2c.h`, `external.h`.
* `prog7` uses `prog5.c`, `file6c.c`, `file4c.c`, `file1c.h`, `file2c.h`, `external.h`.

<hr>

This scheme avoids most problems.  You only run into a problem if a
header that defines variables (such as `file2c.h`) is included by
another header (say `file7c.h`) that defines variables.  There isn't an
easy way around that other than "don't do it".

You can partially work around the problem by revising `file2c.h` into
`file2d.h`:

### file2d.h

The issue becomes 'should the header include `#undef DEFINE_VARIABLES`?'
If you omit that from the header and wrap any defining invocation with
`#define` and `#undef`:

    #define DEFINE_VARIABLES
    #include "file2c.h"
    #undef DEFINE_VARIABLES

in the source code (so the headers never alter the value of
`DEFINE_VARIABLES`), then you should be clean.  It is just a nuisance to
have to remember to write the the extra line.  An alternative might be:

    #define HEADER_DEFINING_VARIABLES "file2c.h"
    #include "externdef.h"

### externdef.h

This is getting a tad convoluted, but seems to be secure (using the
`file2d.h`, with no `#undef DEFINE_VARIABLES` in the `file2d.h`).

### file7c.c

### file8c.h

### file8c.c

<hr>

_The next two files complete the source for `prog8` and `prog9`:_

### prog8.c

### file9c.c

* `prog8` uses `prog8.c`, `file7c.c`, `file9c.c`.
* `prog9` uses `prog8.c`, `file8c.c`, `file9c.c`.

<hr>

However, the problems are relatively unlikely to occur in practice,
especially if you take the standard advice to

# Avoid global variables

<hr>

Does this exposition miss anything?

_Confession_: The 'avoiding duplicated code' scheme outlined here was
developed because the issue affects some code I work on (but don't own),
and is a niggling concern with the scheme outlined in the first part of
the answer.  However, the original scheme leaves you with just two
places to modify to keep variable definitions and declarations
synchronized, which is a big step forward over having exernal variable
declarations scattered throughout the code base (which really matters
when there are thousands of files in total).  However, the code in the
files with the names `fileNc.[ch]` (plus `external.h` and `externdef.h`)
shows that it can be made to work.  Clearly, it would not be hard to
create a header generator script to give you the standardized template
for a variable defining and declaring header file.

_NB_ These are toy programs with just barely enough code to make them
marginally interesting.  There is repetition within the examples that
could be removed, but isn't to simplify the pedagogical explanation.
(For example: the difference between `prog5.c` and `prog8.c` is the name
of one of the headers that are included.  It would be possible to
reorganize the code so that the `main()` function was not repeated, but
it would conceal more than it revealed.)

